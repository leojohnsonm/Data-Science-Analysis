# -*- coding: utf-8 -*-
"""School Dropouts of Indian States_Visualisation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MvCyRMGLZ5z1WO1epjB7MAzo4uf8aXI3
"""

import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import pandas.util.testing as tm

df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Pandas/Data_Sets/dropout-ratio-2012-2015.csv')
df

# "NR" represents no record , hence it was replaced by 0
x = df.replace("NR",0)
x

# "Unwanted data" replaced by 0
y = x.replace({"Upper Primary_Boys":"Uppe_r_Primary"},0)
y

y["State_UT"].unique()

z = y.replace({"State_UT":"Arunachal  Pradesh"},"Arunachal Pradesh")

z = z.replace({"State_UT":"Tamil  Nadu"},"Tamil Nadu")

z = z.replace({"State_UT":"Madhya  Pradesh"},"Madhya Pradesh")
z

#Years in numeric were replaced by String for a hassle free data visualization 
def Year(g):
  if g["year"] == "2012-13":
    return "Thirteen"
  elif g["year"] == "2013-14":
    return "Fourteen"
  else:
    return "Fifteen"

z["Yr"] = z.apply(Year,axis = 1)

new = z.drop(columns = ["year"])
new

# Earlier the data type is in Object state, To interpret the datas for calculation , hence it changed to "float64 type" 
new = new.astype({'Primary_Boys':'float64', 'Primary_Girls':'float64', 'Primary_Total':'float64',
       'Upper Primary_Boys':'float64', 'Upper Primary_Girls':'float64', 'Upper Primary_Total':'float64',
       'Secondary _Boys':'float64', 'Secondary _Girls':'float64', 'Secondary _Total':'float64',
       'HrSecondary_Boys':'float64', 'HrSecondary_Girls':'float64', 'HrSecondary_Total':'float64'})

new.dtypes

#Drop the last three rows 
new = new.drop([107,108,109],axis = 0)

# State names changed to shortest for better understanding of statewise percentages

def States(h):
  if h['State_UT'] == 'A & N Islands':
    return 'AN'
  elif h['State_UT'] == 'Andhra Pradesh':
    return 'AP'
  elif h['State_UT'] == 'Arunachal Pradesh':
    return 'AR'
  elif h['State_UT'] == 'Assam':
    return 'AS'
  elif h['State_UT'] == 'Bihar':
    return 'BR'
  elif h['State_UT'] == 'Chandigarh':
    return 'CH'
  elif h['State_UT'] ==  'Chhattisgarh':
    return 'CG'
  elif h['State_UT'] ==  'Dadra & Nagar Haveli':
    return 'DN'
  elif h['State_UT'] == 'Daman & Diu':
    return 'DD'
  elif h['State_UT'] == 'Delhi':
    return 'DL'
  elif h['State_UT'] ==  'Goa':
    return 'GA'
  elif h['State_UT'] ==  'Gujarat':
    return 'GJ'
  elif h['State_UT'] == 'Haryana':
    return 'HR'
  elif h['State_UT'] ==  'Himachal Pradesh':
    return 'HP'
  elif h['State_UT'] == 'Jammu & Kashmir':
    return 'JK'
  elif h['State_UT'] ==  'Jharkhand':
    return 'JH'
  elif h['State_UT'] ==  'Karnataka':
    return 'KA'
  elif h['State_UT'] == 'Kerala':
    return 'KL' 
  elif h['State_UT'] == 'Lakshadweep':
    return 'LD'
  elif h['State_UT'] == 'Madhya Pradesh':
    return 'MP'
  elif h['State_UT'] == 'Maharashtra':
    return 'MH'
  elif h['State_UT'] == 'Manipur':
    return 'MN'
  elif h['State_UT'] == 'Meghalaya':
    return 'ML'
  elif h['State_UT'] == 'Mizoram':
    return 'MZ' 
  elif h['State_UT'] == 'Nagaland':
    return 'NL'
  elif h['State_UT'] == 'Odisha':
    return 'OD' 
  elif h['State_UT'] == 'Puducherry':
    return 'PY'
  elif h['State_UT'] ==  'Punjab':
    return 'PB'
  elif h['State_UT'] == 'Rajasthan':
    return 'RJ'
  elif h['State_UT'] ==  'Sikkim':
    return 'SK'
  elif h['State_UT'] == 'Tamil Nadu':
    return 'TN'
  elif h['State_UT'] == 'Telangana':
    return 'TS' 
  elif h['State_UT'] == 'Tripura':
    return 'TR'
  elif h['State_UT'] == 'Uttar Pradesh':
    return 'UP'
  elif h['State_UT'] == 'Uttarakhand':
    return 'UK'
  elif h['State_UT'] == 'West Bengal':
    return 'WB'

new["State"] = new.apply(States,axis = 1)

new = new.drop(["State_UT"],axis = 1)
new

def Year(g):
  if g["year"] == "2012-13":
    return "Thirteen"
  elif g["year"] == "2013-14":
    return "Fourteen"
  else:
    return "Fifteen"

z["Yr"] = z.apply(Year,axis = 1)

new.columns

new['Primary_Total'] =  new[['Primary_Boys', 'Primary_Girls']].mean(axis=1)

new['Upper Primary_Total'] = new[['Upper Primary_Boys','Upper Primary_Girls']].mean(axis=1)

new['Secondary _Total'] = new[['Secondary _Boys','Secondary _Girls']].mean(axis=1)

new['HrSecondary_Total'] = new[['HrSecondary_Boys','HrSecondary_Girls']].mean(axis=1)

# Data Frame for 2012-2013 named as Thirteen - Dropout Percentage of top 6 and least 6 ,on all stages like(Primary , Upper Primary, Secondary and Higher Secondary )

th = new[new["Yr"] == "Thirteen"]
th

# Essential columns only called 
thp = th[['State','Primary_Boys','Primary_Girls','Primary_Total']]
thp

# sort the values by ascending , to fetchout the top 6 and least 6 for better insight of data
thp = thp.sort_values(by=('Primary_Total'),ascending = False)
thp

thpu = thpu.drop([27,24,15,12,51])
thpu

thp1 = thp.head(6)
thp2 = thp.tail(6)
thpT = [thp1,thp2]
thpu = pd.concat(thpT)

#13Primary 
sns.barplot(x='State', y='Primary_Total', data=thpu)
plt.title("2012-13 Primary")

thup = th[["State","Upper Primary_Boys","Upper Primary_Girls","Upper Primary_Total"]]
thup

thup = thup.sort_values(by = ("Upper Primary_Total"),ascending = False)
thup

thup = thup.drop([30,24,12,51])

up1 = thup.head(6)
up2 = thup.tail(6)
upT = [up1,up2]
thupu = pd.concat(upT)
thupu

sns.barplot(x='State', y='Upper Primary_Total', data=thupu)
plt.title("2012-13 Upper Primary")

ths = th[["State","Secondary _Boys","Secondary _Girls","Secondary _Total"]]
ths

ths = ths.sort_values(by = ("Secondary _Total"), ascending = False)
ths

ths = ths.drop([98,15])

ths1 = ths.head(6)
ths2 = ths.tail(6)
thsT = [ths1,ths2]
thsu = pd.concat(thsT)

sns.barplot(x='State', y='Secondary _Total', data=thsu)
plt.title("2012-13 Secondary")

thhs = th[["State","HrSecondary_Boys","HrSecondary_Girls","HrSecondary_Total"]]
thhs

thhs = thhs.sort_values(by = ("HrSecondary_Total"),ascending = False)
thhs

thhs = thhs.drop([98,84,36,75,12,66,57,18,45,51])

thhs1 = thhs.head(6)
thhs2 = thhs.tail(6)
thhsT = [thhs1,thhs2]
thhsu = pd.concat(thhsT)
thhsu

sns.barplot(x='State', y='HrSecondary_Total', data=thhsu)
plt.title("2012-13 Hr Secondary")

# Data Frame for 2013-2014 named as Fourteen - Dropout Percentage of top 6 and least 6 ,on all stages like(Primary , Upper Primary, Secondary and Higher Secondary )

fr = new[new["Yr"] == "Fourteen"]
fr

frp = fr[['State','Primary_Boys','Primary_Girls','Primary_Total']]
frp

frp = frp.sort_values(by=('Primary_Total'),ascending = False)
frp

frp = frp.drop([52,28,16,55])

frp1 = frp.head(6)
frp2 = frp.tail(6)
frpuT = [frp1,frp2]
frpu = pd.concat(frpuT)
frpu

sns.barplot(x='State', y='Primary_Total', data=frpu)
plt.title("2013-14 Primary")

frup = fr[['State','Upper Primary_Boys','Upper Primary_Girls', 'Upper Primary_Total']]
frup

frup = frup.sort_values(by=('Upper Primary_Total'),ascending = False)
frup

frup = frup.drop([52,31])

frup1 = frup.head(6)
frup2 = frup.tail(6)
frupT = [frup1,frup2]
frupu = pd.concat(frupT)
frupu

sns.barplot(x='State', y='Upper Primary_Total', data=frupu)
plt.title("2013-14 Upper Primary")

frs = fr[['State','Secondary _Boys','Secondary _Girls','Secondary _Total']]
frs

frs = frs.sort_values(by=('Secondary _Total'),ascending = False)
frs

frs = frs.drop([16])

frs1 = frs.head(6)
frs2 = frs.tail(6)
frsT = [frs1,frs2]
frsu = pd.concat(frsT)
frsu

sns.barplot(x='State', y='Secondary _Total', data=frsu)
plt.title("2013-14 Secondary ")

frhs = fr[['State','HrSecondary_Boys','HrSecondary_Girls', 'HrSecondary_Total']]
frhs

frhs = frhs.sort_values(by=('HrSecondary_Total'),ascending = False)
frhs

frhs = frhs.drop([49,76,70,85,67,13,46,99])

frhs1 = frhs.head(6)
frhs2 = frhs.tail(6)
frhsT = [frhs1,frhs2]
frhsu = pd.concat(frhsT)

sns.barplot(x='State', y='HrSecondary_Total', data=frhsu)
plt.title("2013-14 Hr Secondary")

# Data Frame for 2014- 2015 named as Fifteen - Dropout Percentage of top 6 and least 6 ,on all stages like(Primary , Upper Primary, Secondary and Higher Secondary )

ff = new[new["Yr"] == "Fifteen"]

ffp = ff[['State','Primary_Boys','Primary_Girls','Primary_Total']]
ffp

ffp = ffp.sort_values(by=('Primary_Total'),ascending = False)
ffp

ffp = ffp.drop([92,53,29,17,56])

ffp1 = ffp.head(6)
ffp2 = ffp.tail(6)
ffpT = [ffp1,ffp2]
ffpu = pd.concat(ffpT)

sns.barplot(x='State', y='Primary_Total', data=ffpu)
plt.title("2014-15 Primary")

ffup = ff[['State','Upper Primary_Boys','Upper Primary_Girls', 'Upper Primary_Total']]
ffup

ffup = ffup.sort_values(by=('Upper Primary_Total'),ascending = False)
ffup

ffup = ffup.drop([53,92])

ffup1 = ffup.head(6)
ffup2 = ffup.tail(6)
ffupT = [ffup1,ffup2]
ffupu = pd.concat(ffupT)

sns.barplot(x='State', y='Upper Primary_Total', data=ffupu)
plt.title("2014-15 Upper Primary")

ffs = ff[['State','Secondary _Boys','Secondary _Girls', 'Secondary _Total']]
ffs

ffs = ffs.sort_values(by=('Secondary _Total'),ascending = False)
ffs

ffs = ffs.drop([17])

ffs1 = ffs.head(6)
ffs2 = ffs.tail(6)
ffsT = [ffs1,ffs2]
ffsu = pd.concat(ffsT)

sns.barplot(x='State', y='Secondary _Total', data=ffsu)
plt.title("2014-15 Secondary")

ffhs = ff[['State','HrSecondary_Boys','HrSecondary_Girls', 'HrSecondary_Total']]
ffhs

ffhs = ffhs.sort_values(by=('HrSecondary_Total'),ascending = False)
ffhs

ffhs = ffhs.drop([68,65,86,14,5,11,77])

ffhs1 = ffhs.head(6)
ffhs2 = ffhs.tail(6)
ffhsT = [ffhs1,ffhs2]
ffhsu = pd.concat(ffhsT)

sns.barplot(x='State', y='HrSecondary_Total', data=ffhsu)
plt.title("2014-15 HrSecondary ")