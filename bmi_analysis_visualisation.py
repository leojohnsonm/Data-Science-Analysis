# -*- coding: utf-8 -*-
"""BMI_Analysis_Visualisation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SUkIfh4pL2Fb0tyU68dhUXi4TqG3dGUp
"""

import numpy as np      
import seaborn as sns
import matplotlib.pyplot as plt
import pandas.util.testing as tm
import seaborn as sns
import pandas as pd

data = pd.read_csv("/content/drive/My Drive/Colab Notebooks/Pandas/Data_Sets/500_Person_Gender_Height_Weight_Index.csv")
data

# Gives the summation of null values 
data.isnull().sum()

def bmi(x): 
  z=x["Weight"]/x["Height"]/x["Height"]*10000 
  return int(z) 
data["BMI_value"]=data.apply(bmi,axis=1) 
data.head()

def STATUS(x):
  if 0 < x['BMI_value'] < 16:
    return 'Severe_Underweight'
  elif 16 <= x['BMI_value'] < 18.5:
    return 'Underweight'
  elif 18.5 < x['BMI_value'] < 25:
    return 'Normal'
  elif 25 <= x['BMI_value'] < 30:
    return 'Overweight'
  elif 30<= x['BMI_value'] < 35: 
    return "Obess Class 1"
  elif 35 <= x['BMI_value'] < 40:
    return "Obess Class 2"
  else:
    return "Obess Class 3"

data['Status'] = data.apply(STATUS,axis=1)
data

def sts_val(h):
  if h["Status"] == 'Obess Class 3':
    return 7
  elif h["Status"] == 'Obess Class 2':
    return 6
  elif h["Status"] == 'Obess Class 1':
    return 5
  elif h["Status"] == 'Severe_Underweight':
    return 4
  elif h["Status"] == 'Underweight':
    return 3
  elif h["Status"] == 'Normal':
    return 2
  else:
    return 1

data["Sts_Val"] = data.apply(sts_val,axis = 1)
data

#      <<<   BMI Report generation  >>>

data["Gender"].value_counts()

data["Status"].value_counts()

sns.jointplot(x= '', y="Weight", data = data, kind = "kde")

sns.kdeplot(data = data['Sts_Val'],data2 = data["Weight"])

sns.barplot(x = 'Sts_Val', y = 'Weight',data = data, hue = "Gender")

sns.countplot(x = 'Gender' ,data=data, hue='Sts_Val')

sns.boxplot(x = 'Sts_Val',y = 'Weight',data = data, hue = 'Gender')

sns.violinplot( x = 'Sts_Val', y = 'Weight',data = data, hue = 'Gender')

sns.stripplot(x = 'Sts_Val',y = 'Height', data  = data , hue = 'Gender',dodge = True)

sns.catplot(x = 'Sts_Val', y = 'Height',data = data,hue = 'Gender', col = 'Gender')

sns.set_style('whitegrid')
sns.lmplot(x='Height', y='Weight', data=data, hue='Status', fit_reg=True, legend=False, palette='Set1', size=5, aspect=3) #size = 5 spread of the data poits, aspect = 2 width of the each grid 
ax1 = plt.gca() # it reduces the total image of the plot
ax1.set_title('Height vs Weight', size=15) 
box = ax1.get_position()# it just expands the image of the plot image 
ax1.set_position([box.x0, box.y0, box.width * 0.5, box.height]) #0.5 shows the uniform grid size 
ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), prop={'size': 15}) # to print the "hue labels"

people_count = data['Gender'].value_counts()
people_count

status_count = data["Status"].value_counts()
status_count

#Total Data taken Male Vs 
fig = plt.figure(figsize=(20, 8))
plt.title("Total Data", loc="center", weight=10, size=20)
plt.xticks([])
plt.yticks([])

# first pie plot
ax1 = fig.add_subplot(121)
ax1.axis('equal')
explode = (0.01,)*(len(people_count))
wedges, texts, autotexts = ax1.pie( people_count,
                                    radius=0.8,
                                    explode=explode,
                                    labels=['Female','Male'],
                                    colors=['#3b7fed','#fa3434'],
                                    autopct="%1.1f%%",
                                    pctdistance=0.8,
                                    textprops=dict(color='k'),
                                    wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'w' }
)
plt.setp(autotexts,size=17)
plt.setp(texts,size=15)
my_circle = plt.Circle((0,0),0.5,color='white')
p = plt.gcf()
p.gca().add_artist(my_circle)


# second pie plot
ax1 = fig.add_subplot(122)
ax1.axis('equal')
explode = (0.01,)*(len(status_count))
wedges, texts, autotexts = ax1.pie( status_count,
                                    radius=0.8,
                                    explode=[0.1,0.01,0.1,0.01,0.01,0.01,0.25],
                                    labels=['Obess Class 3','Obess Class 1', 'Obess Class 2', 'Overweight','Normal', 'Underweight', 'Severe_Underweight'],
                                    autopct="%1.1f%%",
                                    pctdistance=0.8,
                                    textprops=dict(color='k'),
                                    wedgeprops = { 'linewidth' : 5, 'edgecolor' : 'w' }
)
plt.setp(autotexts,size=17)
plt.setp(texts,size=15)
my_circle = plt.Circle((0,0),0.5,color='white')
p = plt.gcf()
p.gca().add_artist(my_circle)

male_data = data[data["Gender"] == "Male"]
male_data

male_status_counts = male_data["Status"].value_counts()
male_status_counts

female_data = data[data["Gender"] == "Female"]
female_data

female_status_count = female_data["Status"].value_counts()
female_status_count

fig = plt.figure(figsize=(20,8))
plt.title("Female vs Male comparison",loc='center',weight=10,size=15)
plt.xticks([])
plt.yticks([])

# first pie-plot
ax1 = fig.add_subplot(121)
ax1.axis('equal')
explode = (0.01,0.16,0.01,0.14,0.01,0.01,0.2)

wedges, texts, autotexts =  ax1.pie(male_status_counts,
                                    radius=0.8,
                                    explode=explode,
                                    labels=['Obess Class 1', 'Obess Class 2', 'Overweight', 'Obess Class 3','Normal', 'Underweight', 'Severe_Underweight'],
                                    autopct="%1.1f%%",
                                    pctdistance=0.8,
                                    textprops=dict(color='k'),
                                    wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'w'}
                                    )
plt.setp(autotexts,size=17)
plt.setp(texts,size=15)
my_circle = plt.Circle((0,0),0.5,color='white')
p = plt.gcf() # get current figure reference
p.gca().add_artist(my_circle) # get current axes
ax1.text(0,0,'Female',size=20,color='#1fa774',horizontalalignment='center',weight='bold')

# Second pie-plot
ax2 = fig.add_subplot(122)
ax2.axis('equal')
explode = (0.01,0.16,0.01,0.14,0.01,0.01,0.2)
wedges2, texts2, autotexts2 =  ax2.pie(female_status_count,
                                    radius=0.8,
                                    explode=explode,
                                    labels=['Obess Class 1', 'Obess Class 2', 'Overweight', 'Obess Class 3','Normal', 'Underweight', 'Severe_Underweight'],
                                    autopct="%1.1f%%",
                                    pctdistance=0.8,
                                    textprops=dict(color='k'),
                                    wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'w' }
                                    )
plt.setp(autotexts2,size=17)
plt.setp(texts2,size=15)
my_circle = plt.Circle((0,0),0.5,color='white')
p = plt.gcf() # get current figure reference
p.gca().add_artist(my_circle) # get current axes
ax2.text(0,0,'Male',size=20,color='#1fa774',horizontalalignment='center',weight='bold')